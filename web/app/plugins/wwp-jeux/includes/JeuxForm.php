<?php
/**
 * Created by PhpStorm.
 * User: jeremydesvaux
 * Date: 09/08/2016
 * Time: 17:16
 */

namespace WonderWp\Plugin\Jeux;


use Doctrine\ORM\EntityManager;
use Symfony\Component\DependencyInjection\SimpleXMLElement;
use WonderWp\DI\Container;
use WonderWp\Entity\EntityAttribute;
use WonderWp\Forms\Fields\AbstractField;
use WonderWp\Forms\Fields\BooleanField;
use WonderWp\Forms\Fields\HiddenField;
use WonderWp\Forms\Fields\PageField;
use WonderWp\Forms\Fields\SelectField;
use WonderWp\Forms\FormGroup;
use WonderWp\Forms\FormInterface;
use WonderWp\Forms\FormValidatorInterface;
use WonderWp\Forms\ModelForm;
use WonderWp\Plugin\Forms\Fields\LocaleField;
use WonderWp\Plugin\Forms\Fields\MediaField;

/**
 * Class JeuxForm
 * @package WonderWp\Plugin\Jeux
 * Class that defines the form to use when adding / editing the entity
 */
class JeuxForm extends ModelForm
{

    public function setFormInstance(FormInterface $formInstance)
    {
        $formInstance->setName('jeux-form');
        return parent::setFormInstance($formInstance); // TODO: Change the autogenerated stub
    }

    public function preBuild()
    {
        //Fieldset Infos Jeux
        $this->_formInstance->addGroup(new FormGroup('jeux', __('infosjeux.trad', WWP_JEUX_TEXTDOMAIN)));
    }

    public function newField(EntityAttribute $attr)
    {
        $fieldName = $attr->getFieldName();
        $entity = $this->getModelInstance();
        $val = $entity->$fieldName;
        $label = __($fieldName . '.trad', $this->_textDomain);

        //Add here particular cases for your different fields
        switch ($fieldName) {
            case'visuel':
                $f = new MediaField($fieldName, $val, ['label' => $label]);
                break;
            case'locale':
                $f = LocaleField::getInstance($fieldName, $val, ['label' => $label]);
                break;
            case 'pageDotation':
            case 'pageReglement':
            case 'pageGagnants':
                $f = new PageField($fieldName, $val, ['label' => $label]);
                break;
            case'mecaniqueGain':
                $f = new SelectField($fieldName, $val, ['label' => $label]);
                $f->setOptions([
                    0 => 'MÃ©canique',
                    1 => 'Tirage au sort'
                ]);
                break;
            default:
                $f = parent::newField($attr);
                break;
        }
        return $f;
    }

    public function addField(AbstractField $f, $groupName = '')
    {
        if (empty($groupName)) {
            $groupName = 'jeux';
        }
        parent::addField($f, $groupName);
    }

    public function handleRequest(array $data, FormValidatorInterface $formValidator)
    {

        $data = array(
            'id' => null,
            'visuel' => null,
            'titre' => 'Quiz PinKids Ã‚ge de glace',
            'contenu' => 'test',
            'locale' => 'fr_FR',
            'startsAt' => '2016-11-08',
            'endsAt' => '2016-11-25',
            'pageDotation' => '6',
            'pageReglement' => '10',
            'pageGagnants' => '4',
            'mecaniqueGain' => '1'
        );

        if(!empty($data['startsAt'])){ $data['startsAt'] = \DateTime::createFromFormat('Y-m-d',$data['startsAt']); }
        if(!empty($data['endsAt'])){ $data['endsAt'] = \DateTime::createFromFormat('Y-m-d',$data['endsAt']); }

        $postedData = $data;

        \WonderWp\trace($postedData);

        /*//Extract Metas
        $rawMetasData = array();
        if (isset($data['metas'])) {
            $rawMetasData = $data['metas'];
            unset($data['metas']);
        }

        //Extract Ingredients
        $rawIngredientsData = array();
        if (isset($data['ingredients'])) {
            $rawIngredientsData = $data['ingredients'];
            unset($data['ingredients']);
        }

        //Extract Etapes
        $rawEtapesData = array();
        if (isset($data['etapes'])) {
            $rawEtapesData = $data['etapes'];
            unset($data['etapes']);
        }*/

        $errors = parent::handleRequest($data, $formValidator);
        $this->_formInstance->fill($postedData);

        if (!empty($errors)) {
            return $errors;
        }

        $container = Container::getInstance();
        /** @var EntityManager $em */
        $this->_em = $container->offsetGet('entityManager');
        $em = $this->_em;

        /** @var JeuxEntity $recette */
        //$jeux = $this->_modelInstance;

        /*//Process Metas
        $metaErrors = $this->_handleMetas($rawMetasData);
        $errors = $errors + $metaErrors;

        //Process Ingredients
        $ingredientErrors = $this->_handleIngredients($rawIngredientsData, $recette);
        $errors = $errors + $ingredientErrors;

        //Process Etapes
        $etapesErrors = $this->_handleEtapes($rawEtapesData);
        $errors = $errors + $etapesErrors;*/

        $em->flush();

        return $errors;
    }

}