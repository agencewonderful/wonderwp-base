<?php
/**
 * Created by PhpStorm.
 * User: jeremydesvaux
 * Date: 02/09/2016
 * Time: 10:08
 */

namespace WonderWp\Plugin\Recette;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\QueryBuilder;
use WonderWp\APlugin\AbstractPluginFrontendController;
use WonderWp\HttpFoundation\Request;
use WonderWp\Theme\Components\PaginationComponent;
use WonderWp\Theme\ThemeQueryService;

class RecettePublicController extends AbstractPluginFrontendController
{

    public function handleShortcode($atts)
    {
        if (empty($atts['locale'])) {
            $atts['locale'] = get_locale();
        }
        if (empty($atts['vue'])) {
            $atts['vue'] = 'grid';
        }
        return parent::handleShortcode($atts);
    }

    public function defaultAction($atts)
    {
        return $this->listAction($atts); // TODO: Change the autogenerated stub
    }

    public function listActionEndPoint($arome=null,$typePlat=null){
        $atts = array();
        if(!empty($arome)){ $atts['arome'] = $arome; }
        if(!empty($typePlat)){ $atts['typePlat'] = $typePlat; }
        $content = $this->handleShortcode($atts);
    }
    public function listAction($atts)
    {

        $request = Request::getInstance();

        if($request->getMethod()==='POST'){
            $this->_saveFilters($request);
        } else {
            $session = $request->getSession();
            $filters = $session->has('recette-filters') ? $session->get('recette-filters') : null;
            if(!empty($filters)){ foreach($filters as $key=>$val){
                $request->request->set($key,$val);
            }}
        }

        //Params
        $qs=[];

        //Arome
        $arome = $request->request->get('arome');
        if(empty($arome) && !empty(get_query_var('arome'))){
            $arome = get_query_var('arome');
        }
        if(!empty($arome)){
            $qs['arome'] = $arome;
            if(!is_numeric($arome)){
                $arome=get_category_by_slug($arome);
            } else {
                $arome = get_category($arome);
            }
        }

        //Type de plat
        $typePlat = $request->request->get('typeplat');
        if(empty($typePlat) && !empty(get_query_var('typeplat'))){
            $typePlat = get_query_var('typeplat');
        }
        if(!empty($typePlat)){
            $qs['typeplat'] = $typePlat;
            if(!is_numeric($typePlat)){
                $typePlat=get_category_by_slug($typePlat);
            } else {
                $typePlat=get_category($typePlat);
            }
        }

        //Instant
        $instant = $request->request->get('instant');
        if(empty($instant) && !empty(get_query_var('instant'))){
            $instant = get_query_var('instant');
        }
        if(!empty($instant)){
            $qs['instant'] = $instant;
            if(!is_numeric($instant)){
                $instant=get_category_by_slug($instant);
            } else {
                $instant=get_category($instant);
            }
        }

        $metas = array();

        if(!empty($arome)){
            $metas['saveur'] = $arome->term_id;
        }
        if(!empty($typePlat)){
            $metas['type_plat'] = $typePlat->term_id;
        }
        if(!empty($instant)){
            $metas['moment'] = $instant->term_id;
        }

        $filters = array(
            'locale'=>$atts['locale']
        );

        $page = get_query_var('pageno');
        if(empty($page)){ $page = 1; }
        $perPage = 24;
        $offset=($page-1)*$perPage;

        //Get current records page
        /** @var RecetteRepository $repository */
        $repository = $this->_entityManager->getRepository(RecetteEntity::class);
        $recettes = $repository->getFindByMetas($metas,$filters,$offset,$perPage);
        $recetteCount = count($recettes);


        $paginationUrl = get_permalink();
        if(!empty($qs)){ foreach($qs as $key=>$val){
            $paginationUrl.= $key.'/'.$val.'/';
        }}

        $paginationUrl.='pageno/';
        $paginationMarkup = (new PaginationComponent())->getMarkup([
            'nbObjects'=>$recetteCount,
            'perPage'=>$perPage,
            'paginationUrl'=>$paginationUrl,
            'currentPage'=>$page
        ]);

        /** @var RecetteService $recetteService */
        $recetteService = $this->_manager->getService('recette');
        $filtersForm = $recetteService->getFiltersForm($arome,$instant,$typePlat);
        $viewOpts = array(
            'formStart'=>array(
                'action'=>get_permalink()
            ),
            'formEnd'=>array(
                'submitLabel'=>__('validate_filters_form',WWP_RECETTE_TEXTDOMAIN),
                'btnAttributes'=>array(
                    'class'=>['btn','btn-white']
                )
            )
        );

        $viewContent = $this->renderView($atts['vue'], [
            'recettes' => $recettes,
            'filtres'=>$filtersForm->renderView($viewOpts),
            'count'=>$recetteCount,
            'arome'=>$arome,
            'typePlat'=>$typePlat,
            'instant'=>$instant,
            'paginationMarkup'=>$paginationMarkup
        ]);
        return $viewContent;
    }

    private function _saveFilters($request){
        $filters = $request->request->all();
        $session = $request->getSession();

        if(!empty($filters)){
            $session->set('recette-filters',$filters);
        }
    }

    public function recetteAction($recetteSlug)
    {
        /** @var RecetteRepository $repository */
        $repository = $this->_entityManager->getRepository(RecetteEntity::class);
        $recetteQuery = $repository->findBy(['slug' => $recetteSlug]);
        if (empty($recetteQuery[0])) {
            return false;
        }
        /** @var RecetteEntity $recette */
        $recette = $recetteQuery[0];

        /** @var QueryBuilder $qb */
        $qb = $this->_entityManager->createQueryBuilder();


        $otherRecipes = $repository->getRandomRecipes($recette->getId());

        $title = $recette->getTitle();
        $post = new \stdClass();
        $post->ID = 0;
        $post->post_title = $title;
        $post->post_name = sanitize_title($title);
        $post->post_content = $this->renderView('recette', ['recette' => $recette, 'otherRecipes' => $otherRecipes]);
        $metas = new \stdClass();
        $metas->seopanel = [
            0 => [
                'desc' => $recette->getDescription(),
                'classes' => 'recipe'
            ]
        ];
        $post->metas = $metas;

        /** @var ThemeQueryService $qs */
        $qs = wwp_get_theme_service('query');
        $qs->resetPost($post);
    }

    public function resetFilters($previousRecettePageId){
        //reset filters
        $request = Request::getInstance();
        $session = $request->getSession();
        if($session->has('recette-filters')){
            $session->remove('recette-filters');
        }

        //Redirect to recette page
        $prevPage = get_permalink($previousRecettePageId);
        wp_redirect($prevPage);
        die();
    }

}