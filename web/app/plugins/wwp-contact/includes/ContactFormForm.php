<?php
/**
 * Created by PhpStorm.
 * User: jeremydesvaux
 * Date: 09/08/2016
 * Time: 17:16
 */

namespace WonderWp\Plugin\Contact;


use WonderWp\Entity\EntityAttribute;
use WonderWp\Forms\Fields\BooleanField;
use WonderWp\Forms\Fields\BtnField;
use WonderWp\Forms\Fields\FieldGroup;
use WonderWp\Forms\Fields\HiddenField;
use WonderWp\Forms\Fields\InputField;
use WonderWp\Forms\Fields\SelectField;
use WonderWp\Forms\FormInterface;
use WonderWp\Forms\FormValidatorInterface;
use WonderWp\Forms\ModelForm;
use WonderWp\Plugin\Forms\Fields\LocaleField;

/**
 * Class ContactForm
 * @package WonderWp\Plugin\Contact
 * Class that defines the form to use when adding / editing the entity
 */
class ContactFormForm extends ModelForm
{

    public function setFormInstance(FormInterface $formInstance)
    {
        $formInstance->setName('contact-form');
        return parent::setFormInstance($formInstance); // TODO: Change the autogenerated stub
    }

    public function newField(EntityAttribute $attr)
    {
        $fieldName = $attr->getFieldName();
        $entity = $this->getModelInstance();
        $val = $entity->$fieldName;

        //Add here particular cases for your different fields
        switch ($fieldName) {

            case 'data':
                $f = $this->_generateFormBuilder(json_decode($val));
                break;

            default:
                $f = parent::newField($attr);
                break;
        }
        return $f;
    }

    private function _generateFormBuilder($val)
    {
        $f = new FieldGroup('data', null, ['label' => 'Champs du formulaire : ']);

        $savedFields = is_object($val) ? array_keys(get_object_vars($val)) : array();

        $defaultFields = array('nom', 'prenom', 'mail', 'sujet', 'message');

        $fields = array_merge($savedFields,array_diff($defaultFields,$savedFields));

        foreach ($fields as $fGroupName) {
            $fGroupVal = !empty($val->{$fGroupName}) ? $val->{$fGroupName} : array();
            $generatedGroup = method_exists($this, '_generate' . ucfirst($fGroupName) . 'FieldGroup') ? call_user_func_array(array($this, '_generate' . ucfirst($fGroupName) . 'FieldGroup'), array($fGroupName,$fGroupVal)) : $this->_generateDefaultFieldGroup($fGroupName,$fGroupVal);
            $f->addFieldToGroup($generatedGroup);
        }


        return $f;
    }

    private function _generateDefaultFieldGroup($fGroupName,$fGroupVal)
    {
        //Nom
        $displayRules = [
            'label' => __($fGroupName . '.trad', WWP_CONTACT_TEXTDOMAIN),
            'labelAttributes'=>['class'=>['dragHandle']],
            'inputAttributes' => [
                'name' => 'data[' . $fGroupName . ']'
            ]
        ];
        $fGroup = new FieldGroup('data_' . $fGroupName . '', null, $displayRules);
        //Actif
        $dRA = [
            'label' => __('active.trad', WWP_CONTACT_TEXTDOMAIN),
            'inputAttributes' => [
                'name' => 'data[' . $fGroupName . '][active]'
            ]
        ];
        $fGroupActif = new BooleanField($fGroupName . '_active', !empty($fGroupVal->active), $dRA);
        $fGroup->addFieldToGroup($fGroupActif);

        //Obligatoire
        $dRO = [
            'label' => __('required.trad', WWP_CONTACT_TEXTDOMAIN),
            'inputAttributes' => [
                'name' => 'data[' . $fGroupName . '][required]'
            ]
        ];
        $fGroupObligatoire = new BooleanField($fGroupName . '_required', !empty($fGroupVal->required), $dRO);
        $fGroup->addFieldToGroup($fGroupObligatoire);

        return $fGroup;
    }

    private function _generateSujetFieldGroup($fGroupName,$fGroupVal)
    {
        $fGroup = $this->_generateDefaultFieldGroup($fGroupName,$fGroupVal);

        $sujets = !empty($fGroupVal->sujets) ? $fGroupVal->sujets : new \StdClass();

        if(!empty($sujets)){ foreach($sujets as $i=>$s){
            $s->id = $i;
            $f = $this->_generateSubjectLine($s);
            $fGroup->addFieldToGroup($f);
        }}

        $subjectLineGroup = $this->_generateSubjectLine(new \StdClass());
        $fGroup->addFieldToGroup($subjectLineGroup);

        $addBtn = new BtnField('add-subject', null, ['label' => 'Ajouter un sujet']);
        $fGroup->addFieldToGroup($addBtn);

        return $fGroup;
    }

    private function _generateSubjectLine($subject)
    {
        $i = !empty($subject->id) ? $subject->id : '_newSub_';

        $displayRules = array();
        if ($i == '_newSub_') {
            $displayRules['inputAttributes']['class'] = ['nouveau-sujet', 'hidden'];
        } else {
            $displayRules['inputAttributes']['class'] = ['sujet'];
            $displayRules['after'] = '<button class="button remove-subject">&times;</button>';
        }
        $displayRules['wrapAttributes'] = ['no-wrap' => true];

        //Subject line
        $subjectLineGroup = new fieldGroup('subject' . $i, null, $displayRules);

        //Locale
        $displayRules = [
            'inputAttributes' => [
                'name' => 'data[sujet][sujets][' . $i . '][locale]'
            ]
        ];
        $subjectLocale = LocaleField::getInstance('subject_' . $i . '_locale', !empty($subject->locale) ? $subject->locale : null, $displayRules);
        $subjectLineGroup->addFieldToGroup($subjectLocale);

        //Subject Text
        $displayRules = array('inputAttributes' => [
            'placeholder' => 'Sujet',
            'name' => 'data[sujet][sujets][' . $i . '][text]'
        ]);
        $subjectText = new InputField('subject_' . $i . '_text', !empty($subject->text) ? $subject->text : null, $displayRules);
        $subjectLineGroup->addFieldToGroup($subjectText);

        //Subject Dest
        $displayRules = array('inputAttributes' => [
            'placeholder' => 'Destinataire',
            'name' => 'data[sujet][sujets][' . $i . '][dest]'
        ]);
        $subjectDest = new InputField('subject_' . $i . '_dest', !empty($subject->dest) ? $subject->dest : null, $displayRules);
        $subjectLineGroup->addFieldToGroup($subjectDest);

        return $subjectLineGroup;
    }

    public function handleRequest(array $data, FormValidatorInterface $formValidator)
    {

        if (!empty($data['data'])) {
            if (!empty($data['data']['sujet']) && !empty($data['data']['sujet']['sujets']) && !empty($data['data']['sujet']['sujets']['_newSub_'])) {
                unset($data['data']['sujet']['sujets']['_newSub_']);
            }
            $data['data'] = json_encode($data['data']);
        }

        $errors = parent::handleRequest($data, $formValidator);
        $this->_formInstance->fill($data);

        if (!empty($errors)) {
            return $errors;
        }
    }

}