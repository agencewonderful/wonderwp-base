// font-size Mixin
// compiles to font-size mobile + font-size desktop on small-plus devices
// ex. h2 { @include font-size(h2);}
@mixin font-size($elem) {
  $q: map-get($font-sizes, $elem);
  $mob: map-get($q, "mobile");
  $desk: map-get($q, "desktop");
  font-size: $mob;
  @include respond-to("small-up") {
    font-size: $desk;
  }
}

// Grid Mixin
// arguments are : columns number, gutter, min-breakpoint
// ex. .ingrid { @include grid(4, 1rem, 640px); }
@mixin grid($number:1, $gutter:0, $breakpoint:0) {
  @media (min-width: $breakpoint) {
    display: grid;
    grid-template-columns: repeat($number, 1fr);
    grid-gap: $gutter;
  }
}

// Additionnal "utility" breakpoints aliases
// ex. @include respond-to("medium-up") {...}
$bp-aliases: (
    'tiny'   : (max-width: #{$tiny - 1}),
    'small'  : (max-width: #{$small - 1}),
    'medium' : (max-width: #{$medium - 1}),
    'large' : (max-width: #{$large - 1}),
    'extra-large'  : (max-width: #{$extra-large - 1}),
    'tiny-up'   : (min-width: #{$tiny}),
    'small-up'  : (min-width: #{$small}),
    'medium-up' : (min-width: #{$medium}),
    'large-up' : (min-width: #{$large}),
    'extra-large-up' : (min-width: #{$extra-large}),
    'retina' : (min-resolution: 2dppx)
);

// Source : https://www.sitepoint.com/managing-responsive-breakpoints-sass/
@mixin respond-to($name) {
  // If the key exists in the map
  @if map-has-key($bp-aliases, $name) {
    // Prints a media query based on the value
    @media #{inspect(map-get($bp-aliases, $name))} {
      @content;
    }
  }

    // If the key doesn't exist in the map
  @else {
    @warn "Unfortunately, no value could be retrieved from `#{$breakpoint}`. "
        + "Please make sure it is defined in `$breakpoints` map.";
  }
}

// Absolute center
@mixin absolute-center {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}
.absolute-center {
  @include absolute-center;
}

.visually-hidden {
  position: absolute !important;
  border: 0 !important;
  height: 1px !important;
  width: 1px !important;
  padding: 0 !important;
  overflow: hidden !important;
  clip: rect(0, 0, 0, 0) !important;
}

// Assets path
$get-path-to-assets: "/app/themes/wwp_child_theme/assets";
$get-path-to-styleguide: "/app/themes/wwp_child_theme/styleguide";

// SVG Icons
@mixin svgIcon($iconName) {
  background-image: url("#{$get-path-to-assets}/final/svg/view/svg/sprite.view.svg") !important;
  display: inline-block;
  content: '';
  @extend .svg-#{$iconName} !optional;
  @extend .svg-#{$iconName}-dims !optional;
  background-repeat: no-repeat;
}
// Utilisation
.arrow-right {
  @include svgIcon('arrow-r-white');
}

//////////////////// BOTTOM BACKGROUND GRADIENT ////////////////////
// Style Ã  appliquer sur le wrapper de l'image
@mixin image-bg-gradient(
  $__size: 60%,
  $__pseudo-element: 'after',
	$__direction: 'to top' // 'to top' | 'to bottom' | 'to right' | 'to left'
) {
  position: relative;
  top: 0;
  left: 0;
  z-index: -1;

  &::#{$__pseudo-element} {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    z-index: 1;
    background-image: linear-gradient(unquote($__direction), rgba(0,0,0,0.8) 20%, rgba(0,0,0,0) 100%);
    mix-blend-mode: multiply;
    will-change: height, width;
    transition: base-transition(height, width, opacity);
    pointer-events: none;

    @if ($__direction == 'to right') or ($__direction == 'to left') {
      width: $__size; //Animation au hover -> augmenter largeur
      height: 100%;
    }
    @else {
      height: $__size; //Animation au hover -> augmenter hauteur
      width: 100%;
    }
  }
}
